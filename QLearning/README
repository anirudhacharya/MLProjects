GENERAL INFO - 

The project has 4 files -
MDP.py
gridMDP.py
valueIteration.py
policyIteration.py
modPolicyIteration.py
QLearningAgent.py
ReinforcementLearning.py

This is a continuation from the previous submission so.
QLearningAgent is a class that inherits gridMDP class and has the state transition 
simulator, and the exploration functions and the Q-Value backup methods for the 
QLearning algorithm 

HOW TO RUN IT -

You need to have python 2.7 installed on the machine, and also an IDE for it.
You have to run the file ReindorcementLearning.py to execute the program. 

Two exploration functions have been implemented, one asked in the assignment and the 
other asked as an optional question. 

The description of the alternate exploration function is given in the report being 
submited. To switch between the two exploration functions accordingly comment and 
uncomment the lines 45 and 46 in the file ReinforcementLearning.py. 

The method named 'getAlternateActionToPerform' is the optional exploration function. 

OTHER INFORMATION -

The file ReinforcementLearning.py has a main method where the object of the class QLearningAgent
is being created.
Here you can manipulate the different parameters of the QLearning agent such as R+, N_e,
epsilon, gamma and the learning rate alpha.

The program outputs (state, action) pairs, which are the states and the optimal 
actions to be taken in that state, after the Learning algorthm has converged.

Interpreting the different actions is as follows- 
(0,1)  --> Move Up
(0,-1) --> Move Down
(1,0)  --> Move Right
(-1,0) --> Move Left
Interpreting the states is straight forward and similar to what is done in the book AIMA.

The image files of the different graphs obtained while executing the algorithm is present
in the folder 'Images'

The program outputs a policy matrix and utility matrix.
